.TH "SysIO" 3 "Sat Jun 19 2021" "Version 1.0" "Endian Stream" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SysIO
.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBEndianReader\fP"
.br
.RI "A stream object that is aware of the endianness of the system, and the endianness of the file being read\&. the stream can translate the data to the systems native endianness as it reads in the data\&. "
.ti -1c
.RI "class \fBEndianWriter\fP"
.br
.RI "A stream object that is aware of the endianness of the system, and the endianness of the file being written\&. the stream can translate the data to any desired endianness as it writes the data\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum class \fBByteOrder\fP : unsigned char { \fBLittle\fP, \fBBig\fP }"
.br
.RI "Valid System Endianness Options\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBByteOrder\fP \fBgetSystemEndianness\fP ()"
.br
.RI "Determines system endianness\&. "
.ti -1c
.RI "template<class type > void \fBEndianSwap\fP (type &data)"
.br
.RI "Swaps the endianness for the passed parameter\&. "
.ti -1c
.RI "template<class type > type \fBEndianCast\fP (type data)"
.br
.RI "Swaps the endianness\&. Creates a copy of the original value\&. Like EndianSwap, but non-destructive\&. "
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBSysIO::ByteOrder\fP : unsigned char\fC [strong]\fP"

.PP
Valid System Endianness Options\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILittle \fP\fP
.TP
\fB\fIBig \fP\fP
.PP
Definition at line 19 of file sys_io\&.h\&.
.PP
.nf
20     {
21         Little,
22         Big
23     };
.fi
.SH "Function Documentation"
.PP 
.SS "template<class type > type SysIO::EndianCast (type data)"

.PP
Swaps the endianness\&. Creates a copy of the original value\&. Like EndianSwap, but non-destructive\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP - Type of the object\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIType\fP data - Reference to the memory location to swap\&. 
.RE
.PP
\fBReturns\fP
.RS 4
type - Swapped data 
.RE
.PP

.PP
Definition at line 47 of file sys_io\&.h\&.
.PP
.nf
48     {
49         byte* rawData = new(&data) byte[sizeof(type)];
50         std::reverse(rawData, rawData + sizeof(type));
51         return data;
52     }
.fi
.SS "template<class type > void SysIO::EndianSwap (type & data)"

.PP
Swaps the endianness for the passed parameter\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIType\fP - Type of the object\&. 
.RE
.PP
\fBParameters\fP
.RS 4
\fIType\fP data - Reference to the memory location to swap\&. 
.RE
.PP

.PP
Definition at line 36 of file sys_io\&.h\&.
.PP
.nf
37     {
38         byte* rawData = new(&data) byte[sizeof(type)];
39         std::reverse(rawData, rawData + sizeof(type));
40     }
.fi
.SS "\fBByteOrder\fP SysIO::getSystemEndianness ()"

.PP
Determines system endianness\&. 
.PP
\fBReturns\fP
.RS 4
ByteOrder - System endianness 
.RE
.PP

.PP
Definition at line 10 of file sys_io\&.cpp\&.
.PP
.nf
11     {
12         // Create a temp short equal to one\&. Then create a char array in the same memory address
13         short one = 0x0001;
14         unsigned char* rawData = new(&one) unsigned char[2];
15         // If the first byte of the short in raw memory is 1 our system is little endian; else, big
16         return rawData[0] ? ByteOrder::Little : ByteOrder::Big;
17     }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Endian Stream from the source code\&.
